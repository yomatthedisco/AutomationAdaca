{
  "stats": {
    "suites": 2,
    "tests": 4,
    "passes": 3,
    "pending": 0,
    "failures": 1,
    "start": "2025-10-05T19:42:18.428Z",
    "end": "2025-10-05T19:43:26.768Z",
    "duration": 68340,
    "testsRegistered": 4,
    "passPercent": 75,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b43e8f66-2989-40b1-9c69-4b9937e1b647",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2af58e0e-5800-4e03-83c2-b4a639d3221a",
          "title": "Inventory Page Tests",
          "fullFile": "C:\\Users\\Memes\\Documents\\AutomationAdaca\\tests\\inventory.test.js",
          "file": "\\tests\\inventory.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Inventory Page Tests\"",
              "fullTitle": "Inventory Page Tests \"before all\" hook in \"Inventory Page Tests\"",
              "timedOut": false,
              "duration": 879,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver = await createDriver();\nloginPage = new LoginPage(driver);\ninventoryPage = new InventoryPage(driver);",
              "err": {},
              "uuid": "b135d358-d17d-45db-aaea-6429ac2503bd",
              "parentUUID": "2af58e0e-5800-4e03-83c2-b4a639d3221a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Inventory Page Tests\"",
              "fullTitle": "Inventory Page Tests \"after all\" hook in \"Inventory Page Tests\"",
              "timedOut": false,
              "duration": 41,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (driver) await driver.quit();\n// Print a short test summary\nrecordTest(this.test);\nprintSummary();",
              "err": {},
              "uuid": "965a07ed-20bc-43b1-974b-f09cf7222d64",
              "parentUUID": "2af58e0e-5800-4e03-83c2-b4a639d3221a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Inventory Page Tests\"",
              "fullTitle": "Inventory Page Tests \"after each\" hook in \"Inventory Page Tests\"",
              "timedOut": false,
              "duration": 108,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (this.currentTest && driver) {\n  try {\n    const { saveScreenshot } = require(\"../utils/driver\");\n    const addContext = require(\"mochawesome/addContext\");\n    const state = this.currentTest.state || \"unknown\";\n    const ts = new Date().toISOString().replace(/[:.]/g, \"-\");\n    const safeName = `${this.currentTest.title}__${state}__${ts}`.replace(/[^a-z0-9\\-]/gi, \"_\").toLowerCase();\n    const destUnderReport = `mochawesome-report/screenshots/${safeName}.png`;\n    await saveScreenshot(driver, destUnderReport);\n    const reportRelativePath = `screenshots/${safeName}.png`;\n    addContext(this, reportRelativePath);\n    // record test outcome\n    recordTest(this.currentTest);\n  } catch (err) {\n    console.warn(\"[WARN] Could not capture screenshot:\", err && err.message ? err.message : err);\n  }\n}",
              "err": {},
              "uuid": "f0ccdfb9-429f-41d9-9b4f-66b5d67f9b07",
              "parentUUID": "2af58e0e-5800-4e03-83c2-b4a639d3221a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Add to cart single item scenario",
              "fullTitle": "Inventory Page Tests Add to cart single item scenario",
              "timedOut": false,
              "duration": 14707,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"screenshots/add_to_cart_single_item_scenario__passed__2025-10-05t19-42-34-020z.png\"",
              "code": "const itemName = testData.testItem.name;\nlogger.info(`Starting Add to cart scenario for item: ${itemName}`);\ntry {\nawait loginPage.open();\nawait loginPage.login(testData.validUser.username, testData.validUser.password);\nlogger.info('Verifying landed on Swag Labs page...');\nexpect(await inventoryPage.isAtInventoryPage()).to.be.true;\nconst displayed = await inventoryPage.addToCartByName(itemName);\nlogger.debug(`Added item name returned: ${displayed}`);\nlogger.info('Verifying Remove button visible...');\nconst removeVisible = await inventoryPage.isRemoveButtonVisible(itemName);\nexpect(removeVisible).to.be.true;\nlogger.debug('Clicking cart button...');\nawait inventoryPage.clickCart();\nlogger.info('Verifying at Cart page...');\nexpect(await inventoryPage.isAtCartPage()).to.be.true;\nlogger.info('Verifying item present in cart...');\nexpect(await inventoryPage.isItemInCart(displayed)).to.be.true;\n} catch (err) {\n  logger.error('Add to cart scenario failed:', err && err.message ? err.message : err);\n  throw err;\n}",
              "err": {},
              "uuid": "b601afe6-a70e-4ac3-91ff-080271aa5f1c",
              "parentUUID": "2af58e0e-5800-4e03-83c2-b4a639d3221a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete an item in Product Page",
              "fullTitle": "Inventory Page Tests Delete an item in Product Page",
              "timedOut": false,
              "duration": 23809,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "\"screenshots/delete_an_item_in_product_page__failed__2025-10-05t19-42-57-906z.png\"",
              "code": "const itemName = testData.testItem.name;\nlogger.info(`Starting Delete item scenario for item: ${itemName}`);\ntry {\n  await loginPage.open();\n  await loginPage.login(testData.validUser.username, testData.validUser.password);\n  expect(await inventoryPage.isAtInventoryPage()).to.be.true;\n  await inventoryPage.addToCartByName(itemName);\n  expect(await inventoryPage.isRemoveButtonVisible(itemName)).to.be.true;\n\n  logger.debug('Removing the item from product page...');\n  await inventoryPage.removeFromCartByName(itemName);\n  // After remove, the remove button should no longer be present; the add button should be present instead\n  const stillRemoveVisible = await inventoryPage.isRemoveButtonVisible(itemName);\n  expect(stillRemoveVisible).to.be.false;\n} catch (err) {\n  logger.error('Delete item scenario failed:', err && err.message ? err.message : err);\n  throw err;\n}",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(xpath, //div[text()=\"Sauce Labs Backpack\"]//ancestor::div[contains(@class,'inventory_item')]//button[text()='Add to cart'])\nWait timed out after 10053ms",
                "estack": "TimeoutError: Waiting for element to be located By(xpath, //div[text()=\"Sauce Labs Backpack\"]//ancestor::div[contains(@class,'inventory_item')]//button[text()='Add to cart'])\nWait timed out after 10053ms\n    at C:\\Users\\Memes\\Documents\\AutomationAdaca\\node_modules\\selenium-webdriver\\lib\\webdriver.js:929:22\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": null
              },
              "uuid": "c0e12207-5d18-4caa-9d92-c45ef2f36949",
              "parentUUID": "2af58e0e-5800-4e03-83c2-b4a639d3221a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b601afe6-a70e-4ac3-91ff-080271aa5f1c"
          ],
          "failures": [
            "c0e12207-5d18-4caa-9d92-c45ef2f36949"
          ],
          "pending": [],
          "skipped": [],
          "duration": 38516,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "e5d7b1ac-45b7-4262-bca7-c63d6ba0306f",
          "title": "Login Page Tests",
          "fullFile": "C:\\Users\\Memes\\Documents\\AutomationAdaca\\tests\\login.test.js",
          "file": "\\tests\\login.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Login Page Tests\"",
              "fullTitle": "Login Page Tests \"before all\" hook in \"Login Page Tests\"",
              "timedOut": false,
              "duration": 619,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "logger.info('Initializing WebDriver...');\ntry {\n  driver = await createDriver();\n  loginPage = new LoginPage(driver);\n  logger.info('WebDriver initialized successfully.');\n} catch (err) {\n  logger.error('Failed to initialize WebDriver:', err);\n  throw err; // Stop tests if WebDriver fails\n}",
              "err": {},
              "uuid": "2d08c742-0fe2-4451-86e4-26fee34a74a3",
              "parentUUID": "e5d7b1ac-45b7-4262-bca7-c63d6ba0306f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Login Page Tests\"",
              "fullTitle": "Login Page Tests \"after all\" hook in \"Login Page Tests\"",
              "timedOut": false,
              "duration": 41,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (driver) {\n  try {\n    logger.info('Closing browser...');\n    await driver.quit();\n    logger.info('Browser closed successfully.');\n  } catch (err) {\n    logger.warn('Error closing browser:', err);\n  }\n}\n// Print a short test summary\nrecordTest(this.test); // record the suite test if any\nprintSummary();",
              "err": {},
              "uuid": "c79e011f-3b40-4afa-8870-07ad4d6d5478",
              "parentUUID": "e5d7b1ac-45b7-4262-bca7-c63d6ba0306f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Login Page Tests\"",
              "fullTitle": "Login Page Tests \"after each\" hook in \"Login Page Tests\"",
              "timedOut": false,
              "duration": 71,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (this.currentTest && driver) {\n  try {\n    const { saveScreenshot } = require(\"../utils/driver\");\n    const addContext = require(\"mochawesome/addContext\");\n    const state = this.currentTest.state || \"unknown\";\n    const ts = new Date().toISOString().replace(/[:.]/g, \"-\");\n    const safeName = `${this.currentTest.title}__${state}__${ts}`.replace(/[^a-z0-9\\-]/gi, \"_\").toLowerCase();\n    const destUnderReport = `mochawesome-report/screenshots/${safeName}.png`;\n    await saveScreenshot(driver, destUnderReport);\n    const reportRelativePath = `screenshots/${safeName}.png`;\n    addContext(this, reportRelativePath);\n    // record test outcome\n    const { recordTest } = require(\"../utils/testReporter\");\n    recordTest(this.currentTest);\n  } catch (err) {\n    logger.warn('Could not capture screenshot:', err && err.message ? err.message : err);\n  }\n}",
              "err": {},
              "uuid": "b91178c2-218c-45d1-b4f5-e178f695af7d",
              "parentUUID": "e5d7b1ac-45b7-4262-bca7-c63d6ba0306f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should login successfully with valid credentials",
              "fullTitle": "Login Page Tests should login successfully with valid credentials",
              "timedOut": false,
              "duration": 14389,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"screenshots/should_login_successfully_with_valid_credentials__passed__2025-10-05t19-43-13-064z.png\"",
              "code": "logger.info('Opening login page...');\nawait loginPage.open();\n  // Use the shared utility to create a traceable username (not actually used for auth here)\n  const { addTimestamp } = require(\"../utils/stringUtil\");\n  const traceableUser = addTimestamp(testData.validUser.username);\n  logger.info(`Logging in with valid credentials (trace id: ${traceableUser})...`);\n  await loginPage.login(testData.validUser.username, testData.validUser.password);\n  logger.info(\"Waiting for page title to contain 'Swag Labs'...\");\n  await loginPage.waitForPageTitleContains(\"Swag Labs\");\n  const title = await driver.getTitle();\n  logger.debug(`Page title received: ${title}`);\n  expect(title).to.include(\"Swag Labs\");",
              "err": {},
              "uuid": "00aa917b-3d78-47ba-aff3-e7d5ef8cf680",
              "parentUUID": "e5d7b1ac-45b7-4262-bca7-c63d6ba0306f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should display error message for invalid credentials",
              "fullTitle": "Login Page Tests should display error message for invalid credentials",
              "timedOut": false,
              "duration": 13482,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"screenshots/should_display_error_message_for_invalid_credentials__passed__2025-10-05t19-43-26-655z.png\"",
              "code": "logger.info('Opening login page...');\nawait loginPage.open();\nlogger.info('Logging in with invalid credentials...');\nawait loginPage.login(testData.invalidUser.username, testData.invalidUser.password);\nlogger.info('Fetching error message...');\nconst error = await loginPage.getErrorMessage();\nlogger.debug(`Error message received: ${error}`);\nexpect(error).to.contain(\"Epic sadface\");",
              "err": {},
              "uuid": "feb90eda-da6f-433e-9852-a9b029231c26",
              "parentUUID": "e5d7b1ac-45b7-4262-bca7-c63d6ba0306f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "00aa917b-3d78-47ba-aff3-e7d5ef8cf680",
            "feb90eda-da6f-433e-9852-a9b029231c26"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 27871,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.4"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": null,
      "version": "6.3.0"
    }
  }
}