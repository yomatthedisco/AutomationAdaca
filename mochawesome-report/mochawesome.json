{
  "stats": {
    "suites": 2,
    "tests": 4,
    "passes": 3,
    "pending": 0,
    "failures": 1,
    "start": "2025-10-05T18:49:48.698Z",
    "end": "2025-10-05T18:50:56.764Z",
    "duration": 68066,
    "testsRegistered": 4,
    "passPercent": 75,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7c8037c8-2143-4790-91fd-449aab60d671",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cc717906-e0d9-418d-ab31-4ba81ba0c0ba",
          "title": "Inventory Page Tests",
          "fullFile": "C:\\Users\\Memes\\Documents\\AutomationAdaca\\tests\\inventory.test.js",
          "file": "\\tests\\inventory.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Inventory Page Tests\"",
              "fullTitle": "Inventory Page Tests \"before all\" hook in \"Inventory Page Tests\"",
              "timedOut": false,
              "duration": 612,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver = await createDriver();\nloginPage = new LoginPage(driver);\ninventoryPage = new InventoryPage(driver);",
              "err": {},
              "uuid": "9d0a1740-7dcd-4b73-9984-5143ef083a7b",
              "parentUUID": "cc717906-e0d9-418d-ab31-4ba81ba0c0ba",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Inventory Page Tests\"",
              "fullTitle": "Inventory Page Tests \"after all\" hook in \"Inventory Page Tests\"",
              "timedOut": false,
              "duration": 39,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (driver) await driver.quit();\n// Print a short test summary\nrecordTest(this.test);\nprintSummary();",
              "err": {},
              "uuid": "94df9dde-2b06-45fc-a66a-7e38eb49e939",
              "parentUUID": "cc717906-e0d9-418d-ab31-4ba81ba0c0ba",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Inventory Page Tests\"",
              "fullTitle": "Inventory Page Tests \"after each\" hook in \"Inventory Page Tests\"",
              "timedOut": false,
              "duration": 127,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (this.currentTest && driver) {\n  try {\n    const { saveScreenshot } = require(\"../utils/driver\");\n    const addContext = require(\"mochawesome/addContext\");\n    const state = this.currentTest.state || \"unknown\";\n    const ts = new Date().toISOString().replace(/[:.]/g, \"-\");\n    const safeName = `${this.currentTest.title}__${state}__${ts}`.replace(/[^a-z0-9\\-]/gi, \"_\").toLowerCase();\n    const destUnderReport = `mochawesome-report/screenshots/${safeName}.png`;\n    await saveScreenshot(driver, destUnderReport);\n    const reportRelativePath = `screenshots/${safeName}.png`;\n    addContext(this, reportRelativePath);\n    // record test outcome\n    recordTest(this.currentTest);\n  } catch (err) {\n    console.warn(\"[WARN] Could not capture screenshot:\", err && err.message ? err.message : err);\n  }\n}",
              "err": {},
              "uuid": "58ca2797-06ae-49fa-be86-91d96749acad",
              "parentUUID": "cc717906-e0d9-418d-ab31-4ba81ba0c0ba",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Add to cart single item scenario",
              "fullTitle": "Inventory Page Tests Add to cart single item scenario",
              "timedOut": false,
              "duration": 14788,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"screenshots/add_to_cart_single_item_scenario__passed__2025-10-05t18-50-04-105z.png\"",
              "code": "const itemName = testData.testItem.name;\nconsole.log(`[TEST] Starting Add to cart scenario for item: ${itemName}`);\ntry {\nawait loginPage.open();\nawait loginPage.login(testData.validUser.username, testData.validUser.password);\nconsole.log(\"Verifying landed on Swag Labs page...\");\nexpect(await inventoryPage.isAtInventoryPage()).to.be.true;\nconst displayed = await inventoryPage.addToCartByName(itemName);\nconsole.log(`Added item name returned: ${displayed}`);\nconsole.log(\"Verifying Remove button visible...\");\nconst removeVisible = await inventoryPage.isRemoveButtonVisible(itemName);\nexpect(removeVisible).to.be.true;\nconsole.log(\"Clicking cart button...\");\nawait inventoryPage.clickCart();\nconsole.log(\"Verifying at Cart page...\");\nexpect(await inventoryPage.isAtCartPage()).to.be.true;\nconsole.log(\"Verifying item present in cart...\");\nexpect(await inventoryPage.isItemInCart(displayed)).to.be.true;\n} catch (err) {\n  console.error(\"[ERROR] Add to cart scenario failed:\", err && err.message ? err.message : err);\n  throw err;\n}",
              "err": {},
              "uuid": "9e26fbd2-a522-4153-8b27-bdf46be661e0",
              "parentUUID": "cc717906-e0d9-418d-ab31-4ba81ba0c0ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete an item in Product Page",
              "fullTitle": "Inventory Page Tests Delete an item in Product Page",
              "timedOut": false,
              "duration": 23850,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "\"screenshots/delete_an_item_in_product_page__failed__2025-10-05t18-50-28-033z.png\"",
              "code": "const itemName = testData.testItem.name;\nconsole.log(`[TEST] Starting Delete item scenario for item: ${itemName}`);\ntry {\n  await loginPage.open();\n  await loginPage.login(testData.validUser.username, testData.validUser.password);\n  expect(await inventoryPage.isAtInventoryPage()).to.be.true;\n  await inventoryPage.addToCartByName(itemName);\n  expect(await inventoryPage.isRemoveButtonVisible(itemName)).to.be.true;\n  console.log(\"Removing the item from product page...\");\n  await inventoryPage.removeFromCartByName(itemName);\n  // After remove, the remove button should no longer be present; the add button should be present instead\n  const stillRemoveVisible = await inventoryPage.isRemoveButtonVisible(itemName);\n  expect(stillRemoveVisible).to.be.false;\n} catch (err) {\n  console.error(\"[ERROR] Delete item scenario failed:\", err && err.message ? err.message : err);\n  throw err;\n}",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(xpath, //div[text()=\"Sauce Labs Backpack\"]//ancestor::div[contains(@class,'inventory_item')]//button[text()='Add to cart'])\nWait timed out after 10069ms",
                "estack": "TimeoutError: Waiting for element to be located By(xpath, //div[text()=\"Sauce Labs Backpack\"]//ancestor::div[contains(@class,'inventory_item')]//button[text()='Add to cart'])\nWait timed out after 10069ms\n    at C:\\Users\\Memes\\Documents\\AutomationAdaca\\node_modules\\selenium-webdriver\\lib\\webdriver.js:929:22\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": null
              },
              "uuid": "89e759ef-5cc5-4dcd-bdad-626e8f062a73",
              "parentUUID": "cc717906-e0d9-418d-ab31-4ba81ba0c0ba",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9e26fbd2-a522-4153-8b27-bdf46be661e0"
          ],
          "failures": [
            "89e759ef-5cc5-4dcd-bdad-626e8f062a73"
          ],
          "pending": [],
          "skipped": [],
          "duration": 38638,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "a58157f4-0613-4cff-8d74-06dc45ffcce6",
          "title": "Login Page Tests",
          "fullFile": "C:\\Users\\Memes\\Documents\\AutomationAdaca\\tests\\login.test.js",
          "file": "\\tests\\login.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Login Page Tests\"",
              "fullTitle": "Login Page Tests \"before all\" hook in \"Login Page Tests\"",
              "timedOut": false,
              "duration": 581,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"[SETUP] Initializing WebDriver...\");\ntry {\n  driver = await createDriver();\n  loginPage = new LoginPage(driver);\n  console.log(\"[SETUP] WebDriver initialized successfully.\");\n} catch (err) {\n  console.error(\"[ERROR] Failed to initialize WebDriver:\", err);\n  throw err; // Stop tests if WebDriver fails\n}",
              "err": {},
              "uuid": "3cd0c606-eb19-4844-9ba6-60520b54a0c0",
              "parentUUID": "a58157f4-0613-4cff-8d74-06dc45ffcce6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Login Page Tests\"",
              "fullTitle": "Login Page Tests \"after all\" hook in \"Login Page Tests\"",
              "timedOut": false,
              "duration": 41,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (driver) {\n  try {\n    console.log(\"[TEARDOWN] Closing browser...\");\n    await driver.quit();\n    console.log(\"[TEARDOWN] Browser closed successfully.\");\n  } catch (err) {\n    console.error(\"[WARN] Error closing browser:\", err);\n  }\n}\n// Print a short test summary\nrecordTest(this.test); // record the suite test if any\nprintSummary();",
              "err": {},
              "uuid": "f02a5a60-a84b-4523-acbe-398a90554666",
              "parentUUID": "a58157f4-0613-4cff-8d74-06dc45ffcce6",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Login Page Tests\"",
              "fullTitle": "Login Page Tests \"after each\" hook in \"Login Page Tests\"",
              "timedOut": false,
              "duration": 79,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (this.currentTest && driver) {\n  try {\n    const { saveScreenshot } = require(\"../utils/driver\");\n    const addContext = require(\"mochawesome/addContext\");\n    const state = this.currentTest.state || \"unknown\";\n    const ts = new Date().toISOString().replace(/[:.]/g, \"-\");\n    const safeName = `${this.currentTest.title}__${state}__${ts}`.replace(/[^a-z0-9\\-]/gi, \"_\").toLowerCase();\n    const destUnderReport = `mochawesome-report/screenshots/${safeName}.png`;\n    await saveScreenshot(driver, destUnderReport);\n    const reportRelativePath = `screenshots/${safeName}.png`;\n    addContext(this, reportRelativePath);\n    // record test outcome\n    const { recordTest } = require(\"../utils/testReporter\");\n    recordTest(this.currentTest);\n  } catch (err) {\n    console.warn(\"[WARN] Could not capture screenshot:\", err && err.message ? err.message : err);\n  }\n}",
              "err": {},
              "uuid": "4d737bc6-f523-497e-a65f-3b91eb8221b9",
              "parentUUID": "a58157f4-0613-4cff-8d74-06dc45ffcce6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should login successfully with valid credentials",
              "fullTitle": "Login Page Tests should login successfully with valid credentials",
              "timedOut": false,
              "duration": 14354,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"screenshots/should_login_successfully_with_valid_credentials__passed__2025-10-05t18-50-43-135z.png\"",
              "code": "console.log(\"[TEST] Opening login page...\");\nawait loginPage.open();\nconsole.log(\"[TEST] Logging in with valid credentials...\");\nawait loginPage.login(testData.validUser.username, testData.validUser.password);\nconsole.log(\"[TEST] Waiting for page title to contain 'Swag Labs'...\");\nawait loginPage.waitForPageTitleContains(\"Swag Labs\");\nconst title = await driver.getTitle();\nconsole.log(`[ASSERT] Page title received: ${title}`);\nexpect(title).to.include(\"Swag Labs\");",
              "err": {},
              "uuid": "46dda69a-e388-4ed9-bf80-f9e141422efb",
              "parentUUID": "a58157f4-0613-4cff-8d74-06dc45ffcce6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should display error message for invalid credentials",
              "fullTitle": "Login Page Tests should display error message for invalid credentials",
              "timedOut": false,
              "duration": 13401,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"screenshots/should_display_error_message_for_invalid_credentials__passed__2025-10-05t18-50-56-643z.png\"",
              "code": "console.log(\"[TEST] Opening login page...\");\nawait loginPage.open();\nconsole.log(\"[TEST] Logging in with invalid credentials...\");\nawait loginPage.login(testData.invalidUser.username, testData.invalidUser.password);\nconsole.log(\"[TEST] Fetching error message...\");\nconst error = await loginPage.getErrorMessage();\nconsole.log(`[ASSERT] Error message received: ${error}`);\nexpect(error).to.contain(\"Epic sadface\");",
              "err": {},
              "uuid": "6b53bc94-a1b6-4b27-8f73-6d8b3f21844d",
              "parentUUID": "a58157f4-0613-4cff-8d74-06dc45ffcce6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "46dda69a-e388-4ed9-bf80-f9e141422efb",
            "6b53bc94-a1b6-4b27-8f73-6d8b3f21844d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 27755,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.4"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": null,
      "version": "6.3.0"
    }
  }
}